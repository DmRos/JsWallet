// Generated by LiveScript 1.6.0
(function(){
  var ref$, foldl, split, join, transformFunc, leaveSpace, tranformSuccess, tranformFail, leaveSpaceVariable, tranformFailWhen, transformLine, transform;
  ref$ = require('prelude-ls'), foldl = ref$.foldl, split = ref$.split, join = ref$.join;
  transformFunc = function(line){
    return line.replace(/(\)=>)/, ',cb$)->');
  };
  leaveSpace = function(text){
    text == null && (text = "");
    return function(what){
      var ref$, ref1$;
      return ((ref$ = (ref1$ = what.match(/ +/)) != null ? ref1$[0] : void 8) != null ? ref$ : "") + ("return cb$ " + text);
    };
  };
  tranformSuccess = function(line){
    return line.replace(/^ +(next) /, leaveSpace('null,'));
  };
  tranformFail = function(line){
    return line.replace(/^ +(stop) /, leaveSpace());
  };
  leaveSpaceVariable = function(text){
    return function(what, what2, variable){
      var first;
      first = leaveSpace(text)(what);
      return first + "" + variable + " if " + variable + "?";
    };
  };
  tranformFailWhen = function(line){
    return line.replace(/^ +(stop when) ([a-zA-Z\$_][a-zA-Z$_\-0-9]+)/, leaveSpaceVariable());
  };
  transformLine = function(state, line){
    var current, ref$, ref1$, justEnabled, relevant, transformed;
    current = (ref$ = (ref1$ = line.match(/ /g)) != null ? ref1$.length : void 8) != null ? ref$ : 0;
    if (state.monad.line >= current) {
      state.monad.enabled = false;
    }
    justEnabled = ((ref$ = line.match(/(\)=>)/g)) != null ? ref$.length : void 8) === 1;
    if (state.monad.enabled !== true) {
      state.monad.enabled = justEnabled;
    }
    relevant = state.monad.enabled && state.monad.line < current;
    transformed = (function(){
      switch (false) {
      case !justEnabled:
        return transformFunc(line);
      case !(relevant && line.match(/^ +next /) != null):
        return tranformSuccess(line);
      case !(relevant && line.match(/^ +stop when /) != null):
        return tranformFailWhen(line);
      case !(relevant && line.match(/^ +stop /) != null):
        return tranformFail(line);
      default:
        return line;
      }
    }());
    state.lines.push(transformed);
    if (justEnabled) {
      state.monad.line = current;
    }
    return state;
  };
  transform = function(content){
    var state, result;
    state = {
      lines: [],
      monad: {
        enabled: false,
        line: 0
      }
    };
    result = foldl(transformLine, state)(
    split('\n')(
    content));
    return join('\n')(
    result.lines);
  };
  module.exports = transform;
}).call(this);
