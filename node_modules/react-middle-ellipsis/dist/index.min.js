!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t(require("react")):"function"==typeof define&&define.amd?define(["React"],t):"object"==typeof exports?exports["react-middle-ellipsis"]=t(require("react")):e["react-middle-ellipsis"]=t(e.React)}(this,(function(e){return function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}return r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=1)}([function(t,r){t.exports=e},function(e,t,r){"use strict";r.r(t);var n=r(0),o=r.n(n);function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function u(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var l=function(e,t,r){var n=t.offsetWidth,o=e.offsetWidth,i=r.offsetWidth,u=n>i?n:i;if(u>o){var c=r.textContent,l=c.length,f=(l-(o-(u-i))/(i/l)+5)/2,a=Math.floor(l/2-f),s=Math.ceil(l/2+f);r.setAttribute("data-original",r.textContent),r.textContent=c.substr(0,a)+"..."+c.substr(s)}};t.default=function(e){var t=function(e){var t=e.parentNode,r=t.querySelector(".constrainedChild")||e.childNodes[0],n=t.querySelector(".ellipseMe")||t.querySelector(".constrainedEllipse")||r;null!==r&&null!==n&&(n.hasAttribute("data-original")&&(n.textContent=n.getAttribute("data-original")),l(e.offsetWidth>t.offsetWidth?t:e,r,n))},r=Object(n.useCallback)((function(e){null!==e&&(window.addEventListener("resize",(function(){t(e)})),t(e))}));return o.a.createElement("div",{ref:r,style:u({wordBreak:"keep-all",overflowWrap:"normal"},e.width&&{width:e.width})},e.children)}}])}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,