// Generated by LiveScript 1.6.0
(function(){
  var build, fs, config, libraryTests;
  build = require('./build');
  fs = require('fs');
  config = require('./config');
  libraryTests = ['client/library.js', 'tests/helpers.js', 'tests/library.js'].map(function(it){
    return {
      src: it
    };
  });
  module.exports = function(grunt){
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-contrib-copy');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-livescript');
    grunt.loadNpmTasks('grunt-karma');
    grunt.initConfig({
      pkg: grunt.file.readJSON('./package.json'),
      uglify: {
        build: {
          files: {
            '<%=grunt.option("path")%>.min.js': '<%=grunt.option("path")%>.js'
          },
          options: {
            mangle: {
              sort: true,
              keep_fnames: true
            },
            compress: {
              pure_getters: true,
              keep_fargs: true,
              keep_fnames: true
            },
            sourceMap: true,
            banner: config.banner
          }
        }
      },
      livescript: {
        src: {
          files: {
            './tests/helpers.js': './tests/helpers/*',
            './tests/tests.js': './tests/tests/*',
            './tests/library.js': './tests/library/*',
            './tests/es.js': './tests/tests/es*',
            './tests/experimental.js': './tests/experimental/*',
            './build/index.js': './build/build.ls*'
          }
        }
      },
      clean: ['./library'],
      copy: {
        lib: {
          files: [
            {
              expand: true,
              cwd: './',
              src: ['es5/**', 'es6/**', 'es7/**', 'js/**', 'web/**', 'core/**', 'fn/**', 'index.js', 'shim.js'],
              dest: './library/'
            }, {
              expand: true,
              cwd: './',
              src: ['modules/*'],
              dest: './library/',
              filter: 'isFile'
            }, {
              expand: true,
              cwd: './modules/library/',
              src: '*',
              dest: './library/modules/'
            }
          ]
        }
      },
      watch: {
        core: {
          files: './modules/*',
          tasks: 'default'
        },
        tests: {
          files: './tests/tests/*',
          tasks: 'livescript'
        }
      },
      karma: {
        'options': {
          configFile: './tests/karma.conf.js',
          browsers: ['PhantomJS'],
          singleRun: true
        },
        'continuous': {},
        'continuous-library': {
          files: libraryTests
        }
      }
    });
    grunt.registerTask('build', function(options){
      var done;
      done = this.async();
      return build({
        modules: (options || 'es5,es6,es7,js,web,core').split(','),
        blacklist: (grunt.option('blacklist') || '').split(','),
        library: !!grunt.option('library')
      }, function(err, it){
        if (err) {
          console.error(err);
          process.exit(1);
        }
        grunt.option('path') || grunt.option('path', './custom');
        return fs.writeFile(grunt.option('path') + '.js', it, done);
      });
    });
    grunt.registerTask('client', function(){
      grunt.option('library', '');
      grunt.option('path', './client/core');
      return grunt.task.run(['build:es5,es6,es7,js,web,core', 'uglify']);
    });
    grunt.registerTask('library', function(){
      grunt.option('library', 'true');
      grunt.option('path', './client/library');
      return grunt.task.run(['build:es5,es6,es7,js,web,core', 'uglify']);
    });
    grunt.registerTask('shim', function(){
      grunt.option('library', '');
      grunt.option('path', './client/shim');
      return grunt.task.run(['build:es5,es6,es7,js,web', 'uglify']);
    });
    grunt.registerTask('e', function(){
      grunt.option('library', '' > grunt.option('path', './client/core'));
      return grunt.task.run(['build:es5,es6,es7,js,web,core,exp', 'uglify']);
    });
    return grunt.registerTask('default', ['clean', 'copy', 'client', 'library', 'shim']);
  };
}).call(this);
